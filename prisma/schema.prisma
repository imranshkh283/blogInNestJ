generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime
  title     String     @db.VarChar(255)
  content   String?
  published Boolean    @default(false)
  authorId  Int
  tags      String?    @db.VarChar(255)
  user      user       @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey")
  Comments  Comments[]

  @@index([authorId], map: "Post_authorId_fkey")
}

model profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique(map: "Profile_userId_key")
  user   user    @relation(fields: [userId], references: [id], map: "Profile_userId_fkey")
}

model user {
  id        Int          @id @default(autoincrement())
  email     String       @unique(map: "User_email_key")
  firstname String       @db.VarChar(150)
  lastname  String       @db.VarChar(150)
  fullname  String       @db.VarChar(250)
  status    user_status? @default(INACTIVE)
  role      user_role    @default(USER)
  post      post[]
  profile   profile?
  Comments  Comments?

  // 1. Just for testing purpose
  // userPreference userPreference?

  // 2. Just for testing purpose
  userPreference userPreference? @relation(fields: [userId], references: [id])
  userId         Int?            @unique

  @@unique([email, firstname, lastname])
  @@index([email, id])
}

model userPreference {
  id           Int     @id @default(autoincrement())
  emailUpdates Boolean

  // 1. Just for testing purpose
  // user         user    @relation(fields: [userId], references: [id])
  // userId       Int     @unique

  // 2. Just for testing purpose
  user user?
}

model logentry {
  id     Int      @id @default(autoincrement())
  method String
  url    String
  body   String?  @db.LongText
  ip     String
  date   DateTime @default(now())
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   user @relation(fields: [authorId], references: [id])
  authorId Int  @unique

  post   post @relation(fields: [postId], references: [id])
  postId Int
}

enum user_status {
  ACTIVE
  INACTIVE
  PENDING
}

enum user_role {
  USER
  ADMIN
}
